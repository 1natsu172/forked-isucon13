// 
// Generated by @himenon/openapi-typescript-code-generator v0.27.1
// 
// OpenApi : 3.1.0
// 
// 


import { Schemas, RequestBodies, Responses } from "./types";
export type Response$get$tag$Status$200 = Responses.GetTag.Content;
export type RequestBody$post$login = RequestBodies.Login.Content;
export type RequestBody$post$user = RequestBodies.PostUser.Content;
export interface Response$post$user$Status$201 {
    "application/json": Schemas.User;
}
export interface Parameter$get$users$userid {
    userid: string;
    /** セッションID */
    SESSIONID?: string;
}
export type Response$get$users$userid$Status$200 = Responses.GetUser.Content;
export interface Parameter$get$users$userid$theme {
    userid: string;
    /** セッションID */
    SESSIONID?: string;
}
export type Response$get$users$userid$theme$Status$200 = Responses.GetUserTheme.Content;
export interface Parameter$get$users$statistics {
    userid: string;
    /** セッションID */
    SESSIONID?: string;
}
export type Response$get$users$statistics$Status$200 = Responses.GetUserStatistics.Content;
export interface Parameter$get$livestream {
    limit?: number;
    offset?: number;
}
export type Response$get$livestream$Status$200 = Responses.GetLivestreams.Content;
export interface Parameter$get$livestream$_livestreamid {
    livestreamid: string;
}
export type Response$get$livestream$_livestreamid$Status$200 = Responses.GetLivestream.Content;
export interface Parameter$get$livestream$_livestreamid$superchat {
    livestreamid: string;
}
export interface Response$get$livestream$_livestreamid$superchat$Status$200 {
    "application/json": Schemas.Superchat[];
}
export interface Parameter$post$livestream$livestreamid$superchat {
    livestreamid: string;
    /** application/json */
    "Content-Type"?: string;
}
export type RequestBody$post$livestream$livestreamid$superchat = RequestBodies.PostSuperchat.Content;
export interface Response$post$livestream$livestreamid$superchat$Status$201 {
    "application/json": Schemas.Superchat;
}
export interface Parameter$post$livestream$livestreamid$enter {
    livestreamid: string;
}
export interface Parameter$delete$livestream$livestreamid$enter {
    livestreamid: string;
}
export interface Parameter$get$livestream$_livestreamid$reaction {
    livestreamid: string;
}
export interface Response$get$livestream$_livestreamid$reaction$Status$200 {
    "application/json": Schemas.Reaction[];
}
export interface Parameter$post$livestream$livestreamid$reaction {
    livestreamid: string;
    /** application/json */
    "Content-Type"?: string;
}
export type RequestBody$post$livestream$livestreamid$reaction = RequestBodies.PostReaction.Content;
export interface Response$post$livestream$livestreamid$reaction$Status$201 {
    "application/json": Schemas.Reaction;
}
export interface Parameter$get$livestream$_livestreamid$statistics {
    livestreamid: string;
}
export type Response$get$livestream$_livestreamid$statistics$Status$200 = Responses.GetLivestreamStatistics.Content;
export type RequestBody$post$livestream$reservation = RequestBodies.ReserveLivestream.Content;
export interface Response$post$livestream$reservation$Status$201 {
    "application/json": Schemas.Livestream;
}
export interface Parameter$get$search$livestream {
    /** 検索に使用するタグの名前 */
    tag?: string;
}
export interface Response$get$search$livestream$Status$200 {
    "application/json": Schemas.Livestream[];
}
export interface Parameter$post$superchat$superchatid$report {
    superchatid: string;
}
export interface Response$post$superchat$superchatid$report$Status$201 {
    "application/json": Schemas.SuperchatReport;
}
export type ResponseContentType$get$tag = keyof Response$get$tag$Status$200;
export type RequestContentType$post$login = keyof RequestBody$post$login;
export interface Params$post$login {
    requestBody: RequestBody$post$login["application/json"];
}
export type RequestContentType$post$user = keyof RequestBody$post$user;
export type ResponseContentType$post$user = keyof Response$post$user$Status$201;
export interface Params$post$user {
    requestBody: RequestBody$post$user["application/json"];
}
export type ResponseContentType$get$users$userid = keyof Response$get$users$userid$Status$200;
export interface Params$get$users$userid {
    parameter: Parameter$get$users$userid;
}
export type ResponseContentType$get$users$userid$theme = keyof Response$get$users$userid$theme$Status$200;
export interface Params$get$users$userid$theme {
    parameter: Parameter$get$users$userid$theme;
}
export type ResponseContentType$get$users$statistics = keyof Response$get$users$statistics$Status$200;
export interface Params$get$users$statistics {
    parameter: Parameter$get$users$statistics;
}
export type ResponseContentType$get$livestream = keyof Response$get$livestream$Status$200;
export interface Params$get$livestream {
    parameter: Parameter$get$livestream;
}
export type ResponseContentType$get$livestream$_livestreamid = keyof Response$get$livestream$_livestreamid$Status$200;
export interface Params$get$livestream$_livestreamid {
    parameter: Parameter$get$livestream$_livestreamid;
}
export type ResponseContentType$get$livestream$_livestreamid$superchat = keyof Response$get$livestream$_livestreamid$superchat$Status$200;
export interface Params$get$livestream$_livestreamid$superchat {
    parameter: Parameter$get$livestream$_livestreamid$superchat;
}
export type RequestContentType$post$livestream$livestreamid$superchat = keyof RequestBody$post$livestream$livestreamid$superchat;
export type ResponseContentType$post$livestream$livestreamid$superchat = keyof Response$post$livestream$livestreamid$superchat$Status$201;
export interface Params$post$livestream$livestreamid$superchat {
    parameter: Parameter$post$livestream$livestreamid$superchat;
    requestBody: RequestBody$post$livestream$livestreamid$superchat["application/json"];
}
export interface Params$post$livestream$livestreamid$enter {
    parameter: Parameter$post$livestream$livestreamid$enter;
}
export interface Params$delete$livestream$livestreamid$enter {
    parameter: Parameter$delete$livestream$livestreamid$enter;
}
export type ResponseContentType$get$livestream$_livestreamid$reaction = keyof Response$get$livestream$_livestreamid$reaction$Status$200;
export interface Params$get$livestream$_livestreamid$reaction {
    parameter: Parameter$get$livestream$_livestreamid$reaction;
}
export type RequestContentType$post$livestream$livestreamid$reaction = keyof RequestBody$post$livestream$livestreamid$reaction;
export type ResponseContentType$post$livestream$livestreamid$reaction = keyof Response$post$livestream$livestreamid$reaction$Status$201;
export interface Params$post$livestream$livestreamid$reaction {
    parameter: Parameter$post$livestream$livestreamid$reaction;
    requestBody: RequestBody$post$livestream$livestreamid$reaction["application/json"];
}
export type ResponseContentType$get$livestream$_livestreamid$statistics = keyof Response$get$livestream$_livestreamid$statistics$Status$200;
export interface Params$get$livestream$_livestreamid$statistics {
    parameter: Parameter$get$livestream$_livestreamid$statistics;
}
export type RequestContentType$post$livestream$reservation = keyof RequestBody$post$livestream$reservation;
export type ResponseContentType$post$livestream$reservation = keyof Response$post$livestream$reservation$Status$201;
export interface Params$post$livestream$reservation {
    requestBody: RequestBody$post$livestream$reservation["application/json"];
}
export type ResponseContentType$get$search$livestream = keyof Response$get$search$livestream$Status$200;
export interface Params$get$search$livestream {
    parameter: Parameter$get$search$livestream;
}
export type ResponseContentType$post$superchat$superchatid$report = keyof Response$post$superchat$superchatid$report$Status$201;
export interface Params$post$superchat$superchatid$report {
    parameter: Parameter$post$superchat$superchatid$report;
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$get$tag$Status$200 | Response$post$user$Status$201 | Response$get$users$userid$Status$200 | Response$get$users$userid$theme$Status$200 | Response$get$users$statistics$Status$200 | Response$get$livestream$Status$200 | Response$get$livestream$_livestreamid$Status$200 | Response$get$livestream$_livestreamid$superchat$Status$200 | Response$post$livestream$livestreamid$superchat$Status$201 | Response$get$livestream$_livestreamid$reaction$Status$200 | Response$post$livestream$livestreamid$reaction$Status$201 | Response$get$livestream$_livestreamid$statistics$Status$200 | Response$post$livestream$reservation$Status$201 | Response$get$search$livestream$Status$200 | Response$post$superchat$superchatid$report$Status$201;
export namespace ErrorResponse {
    export type get$tag = void;
    export type post$login = void;
    export type post$user = void;
    export type get$users$userid = void;
    export type get$users$userid$theme = void;
    export type get$users$statistics = void;
    export type get$livestream = void;
    export type get$livestream$_livestreamid = void;
    export type get$livestream$_livestreamid$superchat = void;
    export type post$livestream$livestreamid$superchat = void;
    export type post$livestream$livestreamid$enter = void;
    export type delete$livestream$livestreamid$enter = void;
    export type get$livestream$_livestreamid$reaction = void;
    export type post$livestream$livestreamid$reaction = void;
    export type get$livestream$_livestreamid$statistics = void;
    export type post$livestream$reservation = void;
    export type get$search$livestream = void;
    export type post$superchat$superchatid$report = void;
}
export interface Encoding {
    readonly contentType?: string;
    headers?: Record<string, any>;
    readonly style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    readonly explode?: boolean;
    readonly allowReserved?: boolean;
}
export interface RequestArgs {
    readonly httpMethod: HttpMethod;
    readonly url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    /** サービスで提供されているタグの一覧取得 */
    public async get$tag(option?: RequestOption): Promise<Response$get$tag$Status$200["application/json"]> {
        const url = this.baseUrl + `/tag`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** ログイン */
    public async post$login(params: Params$post$login, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/login`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /**
     * Create New User
     * ユーザ登録
     */
    public async post$user(params: Params$post$user, option?: RequestOption): Promise<Response$post$user$Status$201["application/json"]> {
        const url = this.baseUrl + `/user`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** ユーザプロフィール取得 */
    public async get$users$userid(params: Params$get$users$userid, option?: RequestOption): Promise<Response$get$users$userid$Status$200["application/json"]> {
        const url = this.baseUrl + `/users/${params.parameter.userid}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** 配信者のテーマ取得 */
    public async get$users$userid$theme(params: Params$get$users$userid$theme, option?: RequestOption): Promise<Response$get$users$userid$theme$Status$200["application/json"]> {
        const url = this.baseUrl + `/users/${params.parameter.userid}/theme`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** ユーザの配信に関する統計情報取得 */
    public async get$users$statistics(params: Params$get$users$statistics, option?: RequestOption): Promise<Response$get$users$statistics$Status$200["application/json"]> {
        const url = this.baseUrl + `/users/${params.parameter.userid}/statistics`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /**
     * Your GET endpoint
     * ライブストリームの情報取得エンドポイント
     */
    public async get$livestream(params: Params$get$livestream, option?: RequestOption): Promise<Response$get$livestream$Status$200["application/json"]> {
        const url = this.baseUrl + `/livestream`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            limit: { value: params.parameter.limit, explode: false },
            offset: { value: params.parameter.offset, explode: false }
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers,
            queryParameters: queryParameters
        }, option);
    }
    /**
     * Your GET endpoint
     * ライブストリーム視聴画面の情報取得
     */
    public async get$livestream$_livestreamid(params: Params$get$livestream$_livestreamid, option?: RequestOption): Promise<Response$get$livestream$_livestreamid$Status$200["application/json"]> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /**
     * Your GET endpoint
     * 当該ライブストリームのスパチャ取得
     */
    public async get$livestream$_livestreamid$superchat(params: Params$get$livestream$_livestreamid$superchat, option?: RequestOption): Promise<Response$get$livestream$_livestreamid$superchat$Status$200["application/json"]> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/superchat`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** ライブストリームに対するスパチャ投稿 */
    public async post$livestream$livestreamid$superchat(params: Params$post$livestream$livestreamid$superchat, option?: RequestOption): Promise<Response$post$livestream$livestreamid$superchat$Status$201["application/json"]> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/superchat`;
        const headers = {
            "Content-Type": params.parameter["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /** 配信の視聴開始 */
    public async post$livestream$livestreamid$enter(params: Params$post$livestream$livestreamid$enter, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/enter`;
        const headers = {};
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers
        }, option);
    }
    /** 配信の視聴終了 */
    public async delete$livestream$livestreamid$enter(params: Params$delete$livestream$livestreamid$enter, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/enter`;
        const headers = {};
        return this.apiClient.request({
            httpMethod: "DELETE",
            url,
            headers
        }, option);
    }
    /**
     * Your GET endpoint
     * 当該ライブストリームのリアクション取得
     */
    public async get$livestream$_livestreamid$reaction(params: Params$get$livestream$_livestreamid$reaction, option?: RequestOption): Promise<Response$get$livestream$_livestreamid$reaction$Status$200["application/json"]> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/reaction`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    /** リアクション投稿 */
    public async post$livestream$livestreamid$reaction(params: Params$post$livestream$livestreamid$reaction, option?: RequestOption): Promise<Response$post$livestream$livestreamid$reaction$Status$201["application/json"]> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/reaction`;
        const headers = {
            "Content-Type": params.parameter["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    /**
     * Your GET endpoint
     * ライブストリームの統計情報取得
     */
    public async get$livestream$_livestreamid$statistics(params: Params$get$livestream$_livestreamid$statistics, option?: RequestOption): Promise<Response$get$livestream$_livestreamid$statistics$Status$200["application/json"]> {
        const url = this.baseUrl + `/livestream/${params.parameter.livestreamid}/statistics`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers
        }, option);
    }
    public async post$livestream$reservation(params: Params$post$livestream$reservation, option?: RequestOption): Promise<Response$post$livestream$reservation$Status$201["application/json"]> {
        const url = this.baseUrl + `/livestream/reservation`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody
        }, option);
    }
    public async get$search$livestream(params: Params$get$search$livestream, option?: RequestOption): Promise<Response$get$search$livestream$Status$200["application/json"]> {
        const url = this.baseUrl + `/search_livestream`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            tag: { value: params.parameter.tag, explode: false }
        };
        return this.apiClient.request({
            httpMethod: "GET",
            url,
            headers,
            queryParameters: queryParameters
        }, option);
    }
    public async post$superchat$superchatid$report(params: Params$post$superchat$superchatid$report, option?: RequestOption): Promise<Response$post$superchat$superchatid$report$Status$201["application/json"]> {
        const url = this.baseUrl + `/superchat/${params.parameter.superchatid}/report`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request({
            httpMethod: "POST",
            url,
            headers
        }, option);
    }
}
